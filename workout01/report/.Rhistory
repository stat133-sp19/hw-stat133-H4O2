coord_flip() +
geom_hline(yintercept=mean(point_salary$cost_point), color='blue', size=2) +
ggtitle('NBA Teams Ranked by Cost per Points') +
ylab('Cost per Point (in millions)')+
xlab('Team') +
theme_dark()
ggplot(data = point_salary, aes(x=reorder(team, +cost_point), y=cost_point)) +
geom_bar(stat='identity') +
coord_flip() +
geom_hline(yintercept=mean(point_salary$cost_point), color='blue', size=2) +
ggtitle('NBA Teams Ranked by Cost per Points') +
ylab('Cost per Point (in millions)')+
xlab('Team') +
theme_bw()
ggplot(data = point_salary, aes(x=reorder(team, +cost_point), y=cost_point)) +
geom_bar(stat='identity') +
coord_flip() +
geom_hline(yintercept=mean(point_salary$cost_point), color='blue', size=2) +
ggtitle('NBA Teams Ranked by Cost per Points') +
ylab('Cost per Point (in millions)')+
xlab('Team') +
theme_get()
ggplot(data = point_salary, aes(x=reorder(team, +cost_point), y=cost_point)) +
geom_bar(stat='identity') +
coord_flip() +
geom_hline(yintercept=mean(point_salary$cost_point), color='blue', size=2) +
ggtitle('NBA Teams Ranked by Cost per Points') +
ylab('Cost per Point (in millions)')+
xlab('Team') +
theme_gray()
ggplot(data = point_salary, aes(x=reorder(team, +cost_point), y=cost_point)) +
geom_bar(stat='identity') +
coord_flip() +
geom_hline(yintercept=mean(point_salary$cost_point), color='blue', size=2) +
ggtitle('NBA Teams Ranked by Cost per Points') +
ylab('Cost per Point (in millions)')+
xlab('Team') +
theme_light()
ggplot(data = point_salary, aes(x=reorder(team, +cost_point), y=cost_point)) +
geom_bar(stat='identity') +
coord_flip() +
geom_hline(yintercept=mean(point_salary$cost_point), color='blue', size=2) +
ggtitle('NBA Teams Ranked by Cost per Points') +
ylab('Cost per Point (in millions)')+
xlab('Team') +
theme_grey()
cost_point
point_salary
ggplot2(data=point_salary,aes(x=median_salary, y=median_cost)) +
geom_point()
ggplot(data=point_salary,aes(x=median_salary, y=median_cost)) +
geom_point()
ggplot(data=point_salary,aes(x=median_salary, y=median_point)) +
geom_point()
ggplot(data=point_salary,aes(x=median_salary, y=median_points)) +
geom_point()
ggplot(data=point_salary,aes(x=median_salary, y=median_points)) +
geom_point() +
geom_text(aes(label = team), nudge_x = 1, nudge_y = 1, size=3)
ggplot(data=point_salary,aes(x=median_salary, y=median_points)) +
geom_point() +
geom_text(aes(label = team), nudge_x =0, nudge_y = 1, size=3)
ggplot(data=point_salary,aes(x=median_salary, y=median_points)) +
geom_point() +
geom_text(aes(label = team), nudge_x =0.3, nudge_y = 1, size=3)
ggplot(data=point_salary,aes(x=median_salary, y=median_points)) +
geom_point() +
geom_text(aes(label = team), nudge_x =0.2, nudge_y = 1, size=3)
ggplot(data=point_salary,aes(x=median_salary, y=median_points)) +
geom_path() +
geom_text(aes(label = team), nudge_x =0.2, nudge_y = 1, size=3)
point
ggplot(data=point_salary,aes(x=median_salary, y=median_points)) +
geom_point() +
geom_text(aes(label = team), nudge_x =0.2, nudge_y = 1, size=3)
ggplot(data=point_salary,aes(x=median_salary, y=median_points)) +
geom_jitter() +
geom_text(aes(label = team), nudge_x =0.2, nudge_y = 1, size=3)
ggplot(data=point_salary,aes(x=median_salary, y=median_points)) +
geom_point() +
geom_text(aes(label = team), nudge_x =0.2, nudge_y = 1, size=3)
ggplot(data=point_salary,aes(x=median_salary, y=median_points)) +
geom_point(aes(colour=cost_point)) +
geom_text(aes(label = team), nudge_x =0.2, nudge_y = 1, size=3)
ggplot(data=point_salary,aes(x=median_salary, y=median_points)) +
geom_point(aes(colour=cost_point)) +
geom_text(aes(label = team), nudge_x =0.2, nudge_y = 1, size=3, check_overlap = TRUE)
ggplot(data=point_salary,aes(x=median_salary, y=median_points)) +
geom_point(aes(colour=cost_point)) +
geom_text(aes(label = team), nudge_x =0.2, nudge_y = 1, size=3)
ggplot(data=point_salary,aes(x=median_salary, y=median_points)) +
geom_point(aes(colour=cost_point)) +
geom_text(aes(label = team), nudge_x =0.2, nudge_y = 1, size=3, check_overlap = TRUE)
ggplot(data = point_salary, aes(x=reorder(team, +cost_point), y=cost_point)) +
geom_bar(stat='identity') +
coord_flip() +
geom_hline(yintercept=mean(point_salary$cost_point), color='blue', size=2) +
ggtitle('NBA Teams Ranked by Cost per Points') +
ylab('Cost per Point')+
xlab('Team') +
theme_grey()
ggplot(data=point_salary,aes(x=median_salary, y=median_points)) +
geom_point(aes(colour=cost_point)) +
geom_text(aes(label = team), nudge_x =0.2, nudge_y = 1, size=3, check_overlap = TRUE) +
ggtitle('Median cost to median points of Players from differnent NBA Teams colored by cost per point of each team') +
ylab('Median of Point')+
xlab('Median of salary (in million)') +
theme_grey()
ggplot(data=point_salary,aes(x=median_salary, y=median_points)) +
geom_point(aes(colour=cost_point),size=3) +
geom_text(aes(label = team), nudge_x =0.2, nudge_y = 1, size=3, check_overlap = TRUE) +
ggtitle('Median cost to median points of Players from differnent NBA Teams colored by cost per point of each team') +
ylab('Median of Point')+
xlab('Median of salary (in million)') +
theme_grey()
ggplot(data=point_salary,aes(x=median_salary, y=median_points)) +
geom_point(aes(colour=cost_point),size=2) +
geom_text(aes(label = team), nudge_x =0.2, nudge_y = 1, size=3, check_overlap = TRUE) +
ggtitle('Median cost to median points of Players from differnent NBA Teams colored by cost per point of each team') +
ylab('Median of Point')+
xlab('Median of salary (in million)') +
theme_grey()
ggplot(data=point_salary,aes(x=median_salary, y=median_points)) +
geom_point(aes(colour=cost_point),size=3) +
geom_text(aes(label = team), nudge_x =0.2, nudge_y = 1, size=3, check_overlap = TRUE) +
ggtitle('Median cost to median points of Players from differnent NBA Teams colored by cost per point of each team') +
ylab('Median of Point')+
xlab('Median of salary (in million)') +
theme_grey()
ggplot(data=point_salary,aes(x=median_salary, y=median_points)) +
geom_point(aes(colour=cost_point),size=3) +
geom_text(aes(label = team), nudge_x =0.3, nudge_y = 1, size=3, check_overlap = TRUE) +
ggtitle('Median cost to median points of Players from differnent NBA Teams colored by cost per point of each team') +
ylab('Median of Point')+
xlab('Median of salary (in million)') +
theme_grey()
ggplot(data=point_salary,aes(x=median_salary, y=median_points)) +
geom_point(aes(colour=cost_point),size=3) +
geom_text(aes(label = team), nudge_x =0.23, nudge_y = 1, size=3, check_overlap = TRUE) +
ggtitle('Median cost to median points of Players from differnent NBA Teams colored by cost per point of each team') +
ylab('Median of Point')+
xlab('Median of salary (in million)') +
theme_grey()
library(dplyr)
matrix(c(0,1,1,0,0,0,1,0,1,0,1,0,1,1,0,1,0,0,0,0,1,0,1,0,0,1,0,1,0,1,0,0,0,0,1,0),nrow=4)
matrix(c(0,1,1,0,0,0,1,0,1,0,1,0,1,1,0,1,0,0,0,0,1,0,1,0,0,1,0,1,0,1,0,0,0,0,1,0),nrow=6)
A^2
A<-matrix(c(0,1,1,0,0,0,1,0,1,0,1,0,1,1,0,1,0,0,0,0,1,0,1,0,0,1,0,1,0,1,0,0,0,0,1,0),nrow=6)
A^2
A
A*A
A%*%A
knitr::opts_chunk$set(echo = TRUE)
ggplot(data = team_salaries, aes(x=reorder(team, +total_salary), y=total_salary)) +
geom_bar(stat='identity') +
coord_flip() +
geom_hline(yintercept=mean(team_salaries$total_salary), color='red', size=2) +
ggtitle('NBA Teams Ranked by Total Salary') +
ylab('Total Salary (in millions)')+
xlab('Team')
library(ggplot2)
library(ggplot2)
library(readr)
library(readr)
library(dplyr)
github <- 'https://github.com/ucb-stat133/stat133-hws/'
ggplot(data = point_salary, aes(x=reorder(team, +cost_point), y=cost_point)) +
geom_bar(stat='identity') +
coord_flip() +
geom_hline(yintercept=mean(point_salary$cost_point), color='blue', size=2) +
ggtitle('NBA Teams Ranked by Cost per Points') +
ylab('Cost per Point')+
xlab('Team') +
theme_grey()
knitr::opts_chunk$set(echo = TRUE)
curl -O http://web.pdx.edu/~gerbing/data/cars.csv
curl -O http://web.pdx.edu/~gerbing/data/color.csv
# Find out how to list files with names containing any number.
ls *[0-9]*
#  Use the wildcard * to move all the .txt files to the directory txt-files. Without changing directories, use ls to confirm that all the .txt files are inside txt-files.
mv ../*.txt txt-files
# Without changing directories, use ls to confirm that bread.txt is now inside copies.
ls copies/
getwd()
write.csv(
x = mtcars, # R object to be exported
file = 'stat133-lab05/exports.csv'  # file path
)
write.csv(
x = mtcars, # R object to be exported
file = 'Desktop/stat133-lab05/exports.csv'  # file path
)
write.csv(
x = mtcars, # R object to be exported
file = '../Desktop/stat133-lab05/exports.csv'  # file path
)
# Export a data frame with columns mpg, disp, and hp, to a CSV file dataset.csv in the exports/ subdirectory.
write.csv(
x = mtcars[,c('mpg', 'disp','hp')], # R object to be exported
file = '../Desktop/stat133-lab05/exports/dataset.csv'  # file path
)
write.csv(
x = mtcars, # R object to be exported
file = '../Desktop/stat133-lab05/exports.csv'  # file path
)gew
getwd()
# Export a data frame with columns mpg, disp, and hp, to a CSV file dataset.csv in the exports/ subdirectory.
write.csv(
x = mtcars[,c('mpg', 'disp','hp')], # R object to be exported
file = '/Desktop/stat133-lab05/exports/dataset.csv'  # file path
)
mtcars
getwd()
list.files()
# Export a data frame with columns mpg, disp, and hp, to a CSV file dataset.csv in the exports/ subdirectory.
write.csv(
x = mtcars[,c('mpg', 'disp','hp')], # R object to be exported
file = 'Desktop/stat133-lab05/exports/dataset.csv'  # file path
)
# Export the output of str() on mtcars to a text file called mtcars-structure.txt (inside the exports/ subdirectory).
write.csv(
x = str(mtcars), # R object to be exported
file = 'Desktop/stat133-lab05/exports/mtcars-structure.txt'  # file path
)
# Export the summary() of the entire data frame mtcars to a text file summary-mtcars.txt, in the exports/ folder.
write.csv(
x = summary(mtcars), # R object to be exported
file = 'Desktop/stat133-lab05/exports/summary-mtcars.txt'  # file path
)
help(png)
plot(mtcars$mpg, mtcars$wt, pch = 20)
plot(mtcars$mpg, mtcars$wt, pch = 20)
# Use png() to save a scatterplot of mpg and wt with plot(). Save the graph as scatterplot-mpg-wt.png in the exports/ folder.
png(filename = "stat133-lab05/exports/scatterplot-mpg-wt.png")
plot(mtcars$mpg, mtcars$wt, pch = 20)
dev.off()
plot(mtcars$mpg, mtcars$wt, pch = 20)
help(png)
# Save another version of the scatterplot between hp and wt, but now try to get an image with higher resolution. Save the plot as scatterplot-hp-wt.png in exports/.
png(filename = "stat133-lab05/exports/scatterplot-hp-wt.png")
plot(mtcars$hp, mtcars$wt)
dev.off()
getwd()
ls
hist(mtcars$hp, mtcars$wt)
# Save a histogram in JPEG format of mpg with dimensions (width x height) 600 x 400 pixels, name the file histogram-mpg.jpeg.
jpeg(filename = "stat133-lab05/exports/histogram-mpg.jpeg",  width = 600, height = 400, units = "px")
hist(mtcars$mpg)
dev.off()
help(pdf)
help(ggsave)
# Save another version of the scatterplot between hp and wt, but now try to get an image with higher resolution. Save the plot as scatterplot-hp-wt.png in exports/.
png(filename = "stat133-lab05/exports/scatterplot-hp-wt.png", quality)
# Use png() to save a scatterplot of mpg and wt with plot(). Save the graph as scatterplot-mpg-wt.png in the exports/ folder.
png(filename = "stat133-lab05/exports/scatterplot-mpg-wt.png")
plot(mtcars$mpg, mtcars$wt, pch = 20)
png(filename = "stat133-lab05/exports/scatterplot-mpg-wt.png")
plot(mtcars$mpg, mtcars$wt, pch = 20)
dev.off()
png(filename = "Desktop/stat133-lab05/exports/scatterplot-mpg-wt.png")
plot(mtcars$mpg, mtcars$wt, pch = 20)
dev.off()
png(filename = "Desktop/stat133-lab05/exports/scatterplot-hp-wt.png", quality)
# Save another version of the scatterplot between hp and wt, but now try to get an image with higher resolution. Save the plot as scatterplot-hp-wt.png in exports/.
png(filename = "Desktop/stat133-lab05/exports/scatterplot-hp-wt.png", quality=100)
png(filename = "Desktop/stat133-lab05/exports/scatterplot-hp-wt.png", quality=100)
# Save another version of the scatterplot between hp and wt, but now try to get an image with higher resolution. Save the plot as scatterplot-hp-wt.png in exports/.
png(filename = "Desktop/stat133-lab05/exports/scatterplot-hp-wt.png",  width = 1200, height = 1200, units = "px")
plot(mtcars$hp, mtcars$wt)
dev.off()
png(filename = "Desktop/stat133-lab05/exports/scatterplot-hp-wt.png",  width = 1200, height = 1200, units = "px")
plot(mtcars$hp, mtcars$wt)
dev.off()
jpeg(filename = "Desktop/stat133-lab05/exports/histogram-mpg.jpeg",  width = 600, height = 400, units = "px")
hist(mtcars$mpg)
dev.off()
pdf(filename = "stat133-lab05/exports/histogram-mpg.pdf",  width = 7, height = 5)
pdf(filename = "Desktop/stat133-lab05/exports/histogram-mpg.pdf",  width = 7, height = 5)
pdf(file = "Desktop/stat133-lab05/exports/histogram-mpg.pdf",  width = 7, height = 5)
hist(mtcars$mpg)
dev.off()
# The package "ggplot2" comes with a wrapper function ggsave() that allows you to save ggplot graphics to a specified file. By default, ggsave() saves images in PDF format.
library(ggplot2)
gg_mpg_disp <- ggplot(data=mtcars,aes(x=mpg, y=disp)) +
geom(_point(aes(colour=cost_point),size=3)
gg_mpg_disp <- ggplot(data=mtcars,aes(x=mpg, y=disp)) +
geom_point(size=3)
gg_mpg_disp <- ggplot(data=mtcars,aes(x=mpg, y=disp)) +
geom_point(size=3)
ggsave(filename = 'Desktop/stat133-lab05/exports/scatterplot-mpg-disp.pdf', plot=gg_mpg_disp ,width=7, height=5)
as.logical(c(0,1,pi,-10))
x<-c(T,F,T,T)
as.logical(c(0,1,pi,-10))
x[as.logical(c(0,1,pi,-10))]
as.logical(c(0,1,pi,-10))
x[as.logical(c(0,0,pi,-10))]
install.packages(c("AER", "backports", "BH", "caTools", "class", "coda", "codetools", "colorspace", "curl", "data.table", "digest", "evaluate", "forcats", "foreign", "haven", "igraph", "jsonlite", "later", "lattice", "lme4", "maptools", "markdown", "marmap", "MASS", "Matching", "Matrix", "mgcv", "openssl", "purrr", "quantreg", "R6", "raster", "RcppArmadillo", "RcppEigen", "readxl", "reticulate", "rio", "rmarkdown", "stringi", "stringr", "survival", "sys", "tidyr", "tinytex", "VGAM", "xfun", "zip"))
install.packages(c("AER", "backports", "BH", "caTools", "class", "coda", "codetools", "colorspace", "curl", "data.table", "digest", "evaluate", "forcats", "foreign", "haven", "igraph", "jsonlite", "later", "lattice", "lme4", "maptools", "markdown", "marmap", "MASS", "Matching", "Matrix", "mgcv", "openssl", "purrr", "quantreg", "R6", "raster", "RcppArmadillo", "RcppEigen", "readxl", "reticulate", "rio", "rmarkdown", "stringi", "stringr", "survival", "sys", "tidyr", "tinytex", "VGAM", "xfun", "zip"))
install.packages(c("AER", "backports", "BH", "caTools", "class", "coda", "codetools", "colorspace", "curl", "data.table", "digest", "evaluate", "forcats", "foreign", "haven", "igraph", "jsonlite", "later", "lattice", "lme4", "maptools", "markdown", "marmap", "MASS", "Matching", "Matrix", "mgcv", "openssl", "purrr", "quantreg", "R6", "raster", "RcppArmadillo", "RcppEigen", "readxl", "reticulate", "rio", "rmarkdown", "stringi", "stringr", "survival", "sys", "tidyr", "tinytex", "VGAM", "xfun", "zip"))
install.packages(c("AER", "backports", "BH", "caTools", "class", "coda", "codetools", "colorspace", "curl", "data.table", "digest", "evaluate", "forcats", "foreign", "haven", "igraph", "jsonlite", "later", "lattice", "lme4", "maptools", "markdown", "marmap", "MASS", "Matching", "Matrix", "mgcv", "openssl", "purrr", "quantreg", "R6", "raster", "RcppArmadillo", "RcppEigen", "readxl", "reticulate", "rio", "rmarkdown", "stringi", "stringr", "survival", "sys", "tidyr", "tinytex", "VGAM", "xfun", "zip"))
a<-c(12,4,4,52,23)
a<-1
a
a<-c(12,4,4,52,23)
a[a==4]<-1
a
str(curry)
#Read in the five data sets, using relative file paths; the decision of the data types for each column is up to you.
curry <- read.csv("../data/stephen-curry.csv", stringsAsFactors = FALSE)
library(dplyr)
setwd("~/Desktop/LIOTH/STAT 133/workout01/report")
knitr::include_graphics('../images/gsw-shot-charts.png')
shotsdata <-  read.csv('../data/shots-data.csv', stringsAsFactors = FALSE)[-1]
groupdata <- group_by(shotsdata, name)
# 2 points
pts2summary <- summarise(groupdata,
total = sum(shot_type == "2PT Field Goal" ),
made = sum(shot_made_flag == 'shot_yes' & shot_type == "2PT Field Goal"))
pts2summary <- arrange(mutate(pts2summary, perc_made = made/total), desc(perc_made))
pts2summary
draymond$name <- 'Draymond Green'
#Read in the five data sets, using relative file paths; the decision of the data types for each column is up to you.
curry <- read.csv("../data/stephen-curry.csv", stringsAsFactors = FALSE)
durant <- read.csv("../data/kevin-durant.csv", stringsAsFactors = FALSE)
klay <- read.csv("../data/klay-thompson.csv", stringsAsFactors = FALSE)
andre <- read.csv("../data/andre-iguodala.csv", stringsAsFactors = FALSE)
draymond <- read.csv("../data/draymond-green.csv", stringsAsFactors = FALSE)
#Add a column name to each imported data frame, that contains the name of the corresponding player:
curry$name <- 'Stephen Curry'
durant$name <- 'Kevin Durant'
klay$name <- 'Klay Thompson'
andre$name <- 'Andre Iguodala'
draymond$name <- 'Draymond Green'
curry$shot_made_flag[curry$shot_made_flag=='y']  <- 'shot_yes'
curry$shot_made_flag[curry$shot_made_flag=='n']  <- 'shot_no'
klay$shot_made_flag[klay$shot_made_flag=='y']  <- 'shot_yes'
klay$shot_made_flag[klay$shot_made_flag=='n']  <- 'shot_no'
durant$shot_made_flag[durant$shot_made_flag=='n']  <- 'shot_no'
durant$shot_made_flag[durant$shot_made_flag=='y']  <- 'shot_yes'
andre$shot_made_flag[andre$shot_made_flag=='n']  <- 'shot_no'
andre$shot_made_flag[andre$shot_made_flag=='y']  <- 'shot_yes'
draymond$shot_made_flag[draymond$shot_made_flag=='n']  <- 'shot_no'
draymond$shot_made_flag[draymond$shot_made_flag=='y']  <- 'shot_yes'
#Add a column minute that contains the minute number where a shot occurred.
curry$minite <- curry$period*12 - curry$minutes_remaining
klay$minite <- klay$period*12 - klay$minutes_remaining
durant$minite <- durant$period*12 - durant$minutes_remaining
andre$minite <- andre$period*12 - andre$minutes_remaining
draymond$minite <- draymond$period*12 - draymond$minutes_remaining
#Use sink() to send the summary() output of each imported data frame into individuals text files
sink(file = '../output/stephen-curry-summary.txt')
summary(curry)
sink()
sink(file = '../output/kevin-durant-summary.txt')
summary(durant)
sink()
sink(file = '../output/klay-thompson-summary.txt')
summary(klay)
sink()
sink(file = '../output/andre-iguodala-summary.txt')
summary(andre)
sink()
sink(file = '../output/draymond-green-summary.txt')
summary(draymond)
sink()
#Use the row binding function rbind() to stack the tables into one single data frame.
shots.data <- rbind(curry,durant,klay,andre,draymond)
#Export (i.e. write) the assembled table as a CSV file shots-data.csv inside the folder data/. Use a relative path for this operation.
write.csv(shots.data, file = '../data/shots-data.csv')
c#Use sink() to send the summary() output of the assembled table.
#Send this output to a text file named shots-data-summary.txt inside the output/ folder.
sink(file='../output/shots-data-summary.txt')
summary(shots.data)
sink()
library(jpeg)
library(grid)
curry_scatterplot <- ggplot(data = curry) +
geom_point(aes(x = x, y = y, color = shot_made_flag))
klay_scatterplot <- ggplot(data = klay) +
geom_point(aes(x = x, y = y, color = shot_made_flag))
# court image (to be used as background of plot)
court_file <- "../images/nba-court.jpg"
# create raste object
court_image <- rasterGrob( readJPEG(court_file), width = unit(1, "npc"), height = unit(1, "npc"))
# shot chart with court background
klay_shot_chart <- ggplot(data = klay) +
annotation_custom(court_image, -250, 250, -50, 420) +
geom_point(aes(x = x, y = y, color = shot_made_flag)) +
ylim(-50, 420) +
ggtitle('Shot Chart: Klay Thompson (2016 season)') +
theme_minimal()
ggsave('../images/klay-thompson-shot-chart.pdf', plot = klay_shot_chart, device = "pdf", width = 6.5, height = 5)
curry_shot_chart <- ggplot(data = curry) +
annotation_custom(court_image, -250, 250, -50, 420) +
geom_point(aes(x = x, y = y, color = shot_made_flag)) +
ylim(-50, 420) +
ggtitle('Shot Chart: Stephen Curry (2016 season)') +
theme_minimal()
ggsave('../images/stephen-curry-shot-chart.pdf', plot = curry_shot_chart, device = "pdf", width = 6.5, height = 5)
durant_shot_chart <- ggplot(data = durant) +
annotation_custom(court_image, -250, 250, -50, 420) +
geom_point(aes(x = x, y = y, color = shot_made_flag)) +
ylim(-50, 420) +
ggtitle('Shot Chart: Kevin Durant (2016 season)') +
theme_minimal()
ggsave('../images/kevin-durant-shot-chart.pdf', plot = durant_shot_chart, device = "pdf", width = 6.5, height = 5)
andre_shot_chart <- ggplot(data = andre) +
annotation_custom(court_image, -250, 250, -50, 420) +
geom_point(aes(x = x, y = y, color = shot_made_flag)) +
ylim(-50, 420) +
ggtitle('Shot Chart: Andre Iguodala (2016 season)') +
theme_minimal()
ggsave('../images/andre-iguodala-shot-chart.pdf', plot = andre_shot_chart, device = "pdf", width = 6.5, height = 5)
draymond_shot_chart <- ggplot(data = draymond) +
annotation_custom(court_image, -250, 250, -50, 420) +
geom_point(aes(x = x, y = y, color = shot_made_flag)) +
ylim(-50, 420) +
ggtitle('Shot Chart: Draymond Green (2016 season)') +
theme_minimal()
library(ggplot2)
library(jpeg)
library(grid)
curry_scatterplot <- ggplot(data = curry) +
geom_point(aes(x = x, y = y, color = shot_made_flag))
klay_scatterplot <- ggplot(data = klay) +
geom_point(aes(x = x, y = y, color = shot_made_flag))
# court image (to be used as background of plot)
court_file <- "../images/nba-court.jpg"
# create raste object
court_image <- rasterGrob( readJPEG(court_file), width = unit(1, "npc"), height = unit(1, "npc"))
# shot chart with court background
klay_shot_chart <- ggplot(data = klay) +
annotation_custom(court_image, -250, 250, -50, 420) +
geom_point(aes(x = x, y = y, color = shot_made_flag)) +
ylim(-50, 420) +
ggtitle('Shot Chart: Klay Thompson (2016 season)') +
theme_minimal()
ggsave('../images/klay-thompson-shot-chart.pdf', plot = klay_shot_chart, device = "pdf", width = 6.5, height = 5)
curry_shot_chart <- ggplot(data = curry) +
annotation_custom(court_image, -250, 250, -50, 420) +
geom_point(aes(x = x, y = y, color = shot_made_flag)) +
ylim(-50, 420) +
ggtitle('Shot Chart: Stephen Curry (2016 season)') +
theme_minimal()
ggsave('../images/stephen-curry-shot-chart.pdf', plot = curry_shot_chart, device = "pdf", width = 6.5, height = 5)
durant_shot_chart <- ggplot(data = durant) +
annotation_custom(court_image, -250, 250, -50, 420) +
geom_point(aes(x = x, y = y, color = shot_made_flag)) +
ylim(-50, 420) +
ggtitle('Shot Chart: Kevin Durant (2016 season)') +
theme_minimal()
ggsave('../images/kevin-durant-shot-chart.pdf', plot = durant_shot_chart, device = "pdf", width = 6.5, height = 5)
andre_shot_chart <- ggplot(data = andre) +
annotation_custom(court_image, -250, 250, -50, 420) +
geom_point(aes(x = x, y = y, color = shot_made_flag)) +
ylim(-50, 420) +
ggtitle('Shot Chart: Andre Iguodala (2016 season)') +
theme_minimal()
ggsave('../images/andre-iguodala-shot-chart.pdf', plot = andre_shot_chart, device = "pdf", width = 6.5, height = 5)
draymond_shot_chart <- ggplot(data = draymond) +
annotation_custom(court_image, -250, 250, -50, 420) +
geom_point(aes(x = x, y = y, color = shot_made_flag)) +
ylim(-50, 420) +
ggtitle('Shot Chart: Draymond Green (2016 season)') +
theme_minimal()
ggsave('../images/draymond-green-shot-chart.pdf', plot = draymond_shot_chart, device = "pdf", width = 6.5, height = 5)
# Show all the shot charts in one image
GSW_shot_chart <- ggplot(data = shots.data) +
annotation_custom(court_image, -250, 250, -50, 420) +
geom_point(aes(x = x, y = y, color = shot_made_flag)) +
ylim(-50, 420) +
ggtitle('Shot Chart: GSW shots chart (2016 season)') +
theme_minimal()
facet_GSW_shot_chart <- GSW_shot_chart + facet_wrap(name ~ ., ncol=3)
ggsave('../images/gsw-shot-charts.pdf', plot = facet_GSW_shot_chart, device = "pdf", width = 8, height = 7)
ggsave('../images/gsw-shot-charts.png', plot = facet_GSW_shot_chart, device = "png", width = 8, height = 7)
# total shot summary
shotsummary <- summarise(groupdata,
total = n(),
made = sum(shot_made_flag == 'shot_yes'))
# 2 points
pts2summary <- summarise(groupdata,
total = sum(shot_type == "2PT Field Goal" ),
made = sum(shot_made_flag == 'shot_yes' & shot_type == "2PT Field Goal"))
shotsdata <-  read.csv('../data/shots-data.csv', stringsAsFactors = FALSE)[-1]
groupdata <- group_by(shotsdata, name)
# 2 points
pts2summary <- summarise(groupdata,
total = sum(shot_type == "2PT Field Goal" ),
made = sum(shot_made_flag == 'shot_yes' & shot_type == "2PT Field Goal"))
pts2summary <- arrange(mutate(pts2summary, perc_made = made/total), desc(perc_made))
pts2summary
# 3 points
pts3summary <- summarise(groupdata,
total = sum(shot_type == "3PT Field Goal"),
made = sum(shot_made_flag == 'shot_yes' & shot_type == "3PT Field Goal"))
pts3summary <- arrange(mutate(pts3summary, perc_made = made/total), desc(perc_made))
pts3summary
# total shot summary
shotsummary <- summarise(groupdata,
total = n(),
made = sum(shot_made_flag == 'shot_yes'))
shotsummary <- arrange(mutate(shotsummary, perc_made = made/total), desc(perc_made))
shotsummary
# total shot summary
shotsummary <- summarise(groupdata,
total = n(),
made = sum(shot_made_flag == 'shot_yes'),
real = (sum(shot_made_flag == 'shot_yes' & shot_type == "3PT Field Goal")*3+
sum(shot_made_flag == 'shot_yes' & shot_type == "2PT Field Goal")*2)/n())
shotsummary <- arrange(mutate(shotsummary, perc_made = made/total), desc(perc_made))
shotsummary
