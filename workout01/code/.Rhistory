mean(round(Ytest.fit) != Ytest)
Ytest.fit <- predict(model,newdata = Xtest)
mean(round(Ytest.fit) != Ytest)
#Linear model
model <- lm(V1 ~ ., data=train23)
Ytrain.fit <- predict(model, train23[,-1])
mean(round(Ytrain.fit) != Y)
Ytest.fit <- predict(model, test23[,-1])
mean(round(Ytest.fit) != Ytest)
model1 <- lm(V1 ~ ., data=train)
Ytrain.fit1 <- predict(model, train[,-1])
mean(round(Ytrain.fit1) != train[,1])
Ytest.fit <- predict(model, test[,-1])
mean(round(Ytest.fit) != test[,-1])
Ytrain.fit1 <- predict(model1, train[,-1])
mean(round(Ytrain.fit1) != train[,1])
#Linear model
model <- lm(V1 ~ ., data=train23)
Ytrain.fit <- predict(model, train23[,-1])
mean(round(Ytrain.fit) != Y)
Ytest.fit <- predict(model, test23[,-1])
mean(round(Ytest.fit) != Ytest)
model1 <- lm(V1 ~ ., data=train)
Ytrain.fit1 <- predict(model1, train[,-1])
mean(round(Ytrain.fit1) != train[,1])
Ytest.fit <- predict(model1, test[,-1])
mean(round(Ytest.fit) != test[,-1])
model1 <- lm(V1 ~ ., data=train)
Ytrain.fit1 <- predict(model1, train[,-1])
mean(round(Ytrain.fit1) != train[,1])
Ytest.fit1 <- predict(model1, test[,-1])
mean(round(Ytest.fit1) != test[,1])
head(Ytest.fit1)
head(test[,1])
#knn
neighbors =seq(1:14)
#knn
neighbors =seq(1:14)
N=length(neighbors)
knnErrTrain=vector(length = N)
knnErrTest=vector(length = N)
for (i in 1:N){
GknnTrain=knn(train,train,cl=Y,k=neighbors[i])
knnErrTrain[i]=mean(GknnTrain != Y)
GknnTest=knn(train,test,cl=Y,k=neighbors[i])
knnErrTest[i]=mean(GknnTest != Ytest)
}
for (i in 1:N){
GknnTrain=knn(train23,train23,cl=Y,k=neighbors[i])
knnErrTrain[i]=mean(GknnTrain != Y)
GknnTest=knn(train23,test23,cl=Y,k=neighbors[i])
knnErrTest[i]=mean(GknnTest != Ytest)
}
#plot
plot(neighbors, knnErrTest, xlab = "k-nearest neighbors",ylab = "error rate",type='b',col='blue',ylim = c(0,0.05))
points(neighbors, knnErrTrain,type='b',col='red')
abline(h=LinErrTest, col='blue')
abline(h=LinErrTrain,col='red')
lmErrTrain <- mean(round(Ytrain.fit) != Y)
Ytest.fit <- predict(model, test23[,-1])
lmErrTest <- mean(round(Ytest.fit) != Ytest)
plotdata <- data.frame(knnErrTrain, knnErrTest, lmErrTrain, lmErrTest)
cbind(c(1,2),34)
plotdata <- data.frame(cbind(neighbors, knnErrTrain, knnErrTest, lmErrTrain, lmErrTest))
plotdata
plotdata[,2]
#ggplot
ggplot(data = plotdata,
aes = (x=neighbors, y=plotdata[,2:5]))
library(ggplot2)
#ggplot
ggplot(data = plotdata,
aes(x=neighbors, y=plotdata[,2:5], color=variable))+
geom_line()
#ggplot
ggplot(data = plotdata,
aes(x=neighbors, y=plotdata[,2:5], color))+
geom_line()
#ggplot
ggplot(data = plotdata,
aes(x=neighbors, y=plotdata[,2:5]))+
geom_line()
plotdata$neighbors
#ggplot
ggplot(data = plotdata,
aes(x=neighbors, y=plotdata[,2]))+
geom_line()+
xlab("k") +
ylab("Classification Error") +
opts(title="Classification Errors for different methods on zipcode data")
#ggplot
ggplot(data = plotdata,
aes(x=neighbors, y=plotdata[,2]))+
geom_line()+
xlab("k") +
ylab("Classification Error") +
opts(title="Classification Errors for different methods on zipcode data")+
scale_colour_hue(name="Classification Method",
labels=c("k-NN (Train)",
"k-NN (Test)",
"Linear Regression (Train)",
"Linear Regression (Test)")
)
#ggplot
ggplot(data = plotdata,
aes(x=neighbors, y=plotdata[,2]))+
geom_line()+
xlab("k") +
ylab("Classification Error") +
title("Classification Errors for different methods on zipcode data")+
scale_colour_hue(name="Classification Method",
labels=c("k-NN (Train)",
"k-NN (Test)",
"Linear Regression (Train)",
"Linear Regression (Test)")
)
#ggplot
ggplot(data = plotdata,
aes(x=neighbors, y=plotdata[,2:5]))+
geom_line()+
xlab("k") +
ylab("Classification Error") +
title("Classification Errors for different methods on zipcode data")+
scale_colour_hue(name="Classification Method",
labels=c("k-NN (Train)",
"k-NN (Test)",
"Linear Regression (Train)",
"Linear Regression (Test)")
)
#ggplot
ggplot(data = plotdata,
)+
geom_line()+
xlab("k") +
ylab("Classification Error") +
title("Classification Errors for different methods on zipcode data")+
scale_colour_hue(name="Classification Method",
labels=c("k-NN (Train)",
"k-NN (Test)",
"Linear Regression (Train)",
"Linear Regression (Test)")
)
#ggplot
ggplot(data = plotdata,
aes(x=neighbors, y=plotdata[,2]))+
ggplot(data = plotdata,
aes(x=neighbors, y=plotdata[,3]))+
geom_line()+
xlab("k") +
ylab("Classification Error") +
title("Classification Errors for different methods on zipcode data")+
scale_colour_hue(name="Classification Method",
labels=c("k-NN (Train)",
"k-NN (Test)",
"Linear Regression (Train)",
"Linear Regression (Test)")
)
plotdata
#ggplot
ggplot(data = plotdata,
aes(x=neighbors))+
geom_line(aes(y=plotdata[,2], color = '456789'))+
geom_line(aes(y=plotdata[,3], color = '345678'))+
geom_line(aes(y=plotdata[,4], color = '234567'))+
geom_line(aes(y=plotdata[,5], color = '123456'))+
xlab("k") +
ylab("Classification Error") +
title("Classification Errors for different methods on zipcode data")+
scale_colour_hue(name="Classification Method",
labels=c("k-NN (Train)",
"k-NN (Test)",
"Linear Regression (Train)",
"Linear Regression (Test)")
)
getwd
getwd()
setwd(../..)
setwd(..)
setwd(../../lab06)
setwd(././lab06)
setwd(/Users/lynlioth/Desktop/LIOTH/STAT 133)
setwd(Users/lynlioth/Desktop/LIOTH/STAT 133)
setwd(Users/lynlioth/Desktop/LIOTH)
setwd(lynlioth/Desktop/LIOTH)
setwd("~/Desktop/LIOTH/STAT 133/stat133-lab06")
setwd("~/Desktop/LIOTH/STAT 133/workout01/")
#Read in the five data sets, using relative file paths; the decision of the data types for each column is up to you.
curry <- read.csv("../data/stephen-curry.csv", stringsAsFactors = FALSE)
durant <- read.csv("../data/kevin-durant.csv", stringsAsFactors = FALSE)
klay <- read.csv("../data/klay-thompson.csv", stringsAsFactors = FALSE)
andre <- read.csv("../data/andre-iguodala.csv", stringsAsFactors = FALSE)
draymond <- read.csv("../data/draymond-green.csv", stringsAsFactors = FALSE)
setwd("~/Desktop/LIOTH/STAT 133/workout01/code/")
#Read in the five data sets, using relative file paths; the decision of the data types for each column is up to you.
curry <- read.csv("../data/stephen-curry.csv", stringsAsFactors = FALSE)
durant <- read.csv("../data/kevin-durant.csv", stringsAsFactors = FALSE)
klay <- read.csv("../data/klay-thompson.csv", stringsAsFactors = FALSE)
andre <- read.csv("../data/andre-iguodala.csv", stringsAsFactors = FALSE)
draymond <- read.csv("../data/draymond-green.csv", stringsAsFactors = FALSE)
#Read in the five data sets, using relative file paths; the decision of the data types for each column is up to you.
curry <- read.csv("../data/stephen-curry.csv", stringsAsFactors = FALSE)
#Add a column name to each imported data frame, that contains the name of the corresponding player:
curry$name <- 'Stephen Curry'
durant$name <- 'Kevin Durant'
klay$name <- 'Klay Thompson'
andre$name <- 'Andre Iguodala'
draymond$name <- 'Graymond Green'
curry$shot_made_flag[curry$shot_made_flag=='y']  <- 'shot_yes'
curry$shot_made_flag[curry$shot_made_flag=='n']  <- 'shot_no'
#Add a column minute that contains the minute number where a shot occurred.
curry$minite <- curry$period*12 - curry$minutes_remaining
head(curry)
is.table(cuury)
is.table(curry)
rbind(curry,durant,klay,andre,draymond)
curry_scatterplot <- ggplot(data = curry) +
geom_point(aes(x = x, y = y, color = shot_made_flag))
curry_scatterplot
klay_scatterplot <- ggplot(data = klay) +
geom_point(aes(x = x, y = y, color = shot_made_flag))
klay_scatterplot
head(klay)
curry_scatterplot
head(klay)
klay_scatterplot
library(jpeg)
library(grid)
install.packages('jpeg')
library(jpeg)
# court image (to be used as background of plot)
court_file <- "../images/nba-court.jpg"
# create raste object
court_image <- rasterGrob( readJPEG(court_file), width = unit(1, "npc"), height = unit(1, "npc"))
# shot chart with court background
klay_shot_chart <- ggplot(data = klay) +
annotation_custom(court_image, -250, 250, -50, 420) +
geom_point(aes(x = x, y = y, color = shot_made_flag)) +
ylim(-50, 420) +
ggtitle('Shot Chart: Klay Thompson (2016 season)') +
theme_minimal()
klay_shot_chart
?ggsave
ggsave('klay-thompson-shot-chart.pdf', plot = klay_shot_chart, device = "pdf", width = 6.5, height = 5)
filename <- c("../data/stephen-curry.csv","../data/kevin-durant.csv","../data/klay-thompson.csv","../data/andre-iguodala.csv","../data/draymond-green.csv")
dataname[i]<-read.csv(filename, stringAsFactors = FALSE)
dataname[i]<-read.csv(filename)
filename
filename[1]
dataname[i]
#• title: Workout01-code
#• description: a short description of what the script is about
#• input(s): csv files which contain the data for each players
#• output(s):
dataname <- c('curry','durant','klay','andre','draymond')
for(i in 1:5){
dataname[i]<-read.csv(filename, stringAsFactors = FALSE)
}
dataname[i]
#• title: Workout01-code
#• description: a short description of what the script is about
#• input(s): csv files which contain the data for each players
#• output(s):
names <- c('curry','durant','klay','andre','draymond')
#• title: Workout01-code
#• description: a short description of what the script is about
#• input(s): csv files which contain the data for each players
#• output(s):
names <- c('curry','durant','klay','andre','draymond')
name$shot_made_flag[name$shot_made_flag=='y']  <- 'shot_yes'
names
name in names
name$shot_made_flag[name$shot_made_flag=='n']  <- 'shot_no'
for (name in names){
name$shot_made_flag[name$shot_made_flag=='y']  <- 'shot_yes'
name$shot_made_flag[name$shot_made_flag=='n']  <- 'shot_no'
}
names
name[i]
names[i]
typeof(curry)
class(curry)
#Use the row binding function rbind() to stack the tables into one single data frame.
shots.data <- rbind(curry,durant,klay,andre,draymond)
klay$shot_made_flag[klay$shot_made_flag=='y']  <- 'shot_yes'
klay$shot_made_flag[klay$shot_made_flag=='n']  <- 'shot_no'
durant$shot_made_flag[durant$shot_made_flag=='n']  <- 'shot_no'
durant$shot_made_flag[durant$shot_made_flag=='y']  <- 'shot_yes'
andre$shot_made_flag[andre$shot_made_flag=='n']  <- 'shot_no'
andre$shot_made_flag[andre$shot_made_flag=='y']  <- 'shot_yes'
draymond$shot_made_flag[draymond$shot_made_flag=='n']  <- 'shot_no'
draymond$shot_made_flag[draymond$shot_made_flag=='y']  <- 'shot_yes'
klay$minite <- klay$period*12 - klay$minutes_remaining
durant$minite <- durant$period*12 - durant$minutes_remaining
andre$minite <- andre$period*12 - andre$minutes_remaining
draymond$minite <- draymond$period*12 - draymond$minutes_remaining
sink(file = '../output/kevin-durant-summary.txt')
summary(durant)
sink()
sink(file = '../output/klay-thompson-summary.txt')
summary(klay)
sink()
sink(file = '../output/andre-iguodala-summary.txt')
summary(andre)
sink()
sink(file = '../output/draymond-green-summary.txt')
summary(draymond)
sink()
#Use the row binding function rbind() to stack the tables into one single data frame.
shots.data <- rbind(curry,durant,klay,andre,draymond)
#Export (i.e. write) the assembled table as a CSV file shots-data.csv inside the folder data/. Use a relative path for this operation.
write.csv(shots.data, file = '../data/shots-data.csv')
c(1,2,3)/c(1,2)
c(1,2,3)/c(1,2,4)
#Send this output to a text file named shots-data-summary.txt inside the output/ folder.
sink(file='../output/shots-data-summary.txt')
summary(shots.data)
sink()
GSW_shot_chart <- ggplot(data = shots.data, aes(group = player)) +
annotation_custom(court_image, -250, 250, -50, 420) +
geom_point(aes(x = x, y = y, color = shot_made_flag)) +
ylim(-50, 420) +
ggtitle('Shot Chart: GSW shots chart (2016 season)') +
theme_minimal()
GSW_shot_chart
shots.data
GSW_shot_chart <- ggplot(data = shots.data, aes(group = name)) +
annotation_custom(court_image, -250, 250, -50, 420) +
geom_point(aes(x = x, y = y, color = shot_made_flag)) +
ylim(-50, 420) +
ggtitle('Shot Chart: GSW shots chart (2016 season)') +
theme_minimal()
GSW_shot_chart
# Show all the shot charts in one image
GSW_shot_chart <- ggplot(data = shots.data) +
annotation_custom(court_image, -250, 250, -50, 420) +
geom_point(aes(x = x, y = y, color = shot_made_flag)) +
ylim(-50, 420) +
ggtitle('Shot Chart: GSW shots chart (2016 season)') +
theme_minimal()
GSW_shot_chart + facet_grid(name ~ .)
GSW_shot_chart + facet_grid(name ~ ., ncol=3)
GSW_shot_chart + facet_wrap(name ~ ., ncol=3)
ggsave('../images/gsw-shot-charts.pdf', plot = GSW_shot_chart, device = "pdf", width = 8, height = 7)
curry_shot_chart <- ggplot(data = curry) +
annotation_custom(court_image, -250, 250, -50, 420) +
geom_point(aes(x = x, y = y, color = shot_made_flag)) +
ylim(-50, 420) +
ggtitle('Shot Chart: Stephen Curry (2016 season)') +
theme_minimal()
ggsave('../images/stephen-curry-shot-chart.pdf', plot = curry_shot_chart, device = "pdf", width = 6.5, height = 5)
durant_shot_chart <- ggplot(data = durant) +
annotation_custom(court_image, -250, 250, -50, 420) +
geom_point(aes(x = x, y = y, color = shot_made_flag)) +
ylim(-50, 420) +
ggtitle('Shot Chart: Kevin Durant (2016 season)') +
theme_minimal()
ggsave('../images/kevin-durant-shot-chart.pdf', plot = durant_shot_chart, device = "pdf", width = 6.5, height = 5)
andre_shot_chart <- ggplot(data = andre) +
annotation_custom(court_image, -250, 250, -50, 420) +
geom_point(aes(x = x, y = y, color = shot_made_flag)) +
ylim(-50, 420) +
ggtitle('Shot Chart: Andre Iguodala (2016 season)') +
theme_minimal()
ggsave('../images/andre-iguodala-shot-chart.pdf', plot = andre_shot_chart, device = "pdf", width = 6.5, height = 5)
draymond_shot_chart <- ggplot(data = draymond) +
annotation_custom(court_image, -250, 250, -50, 420) +
geom_point(aes(x = x, y = y, color = shot_made_flag)) +
ylim(-50, 420) +
ggtitle('Shot Chart: Draymond Green (2016 season)') +
theme_minimal()
ggsave('../images/draymond-green-shot-chart.pdf', plot = draymond_shot_chart, device = "pdf", width = 6.5, height = 5)
draymond_shot_chart
GSW_shot_chart + facet_wrap(name ~ ., ncol=3)
knitr::opts_chunk$set(echo = TRUE)
knitr::include_graphics('../images/gsw-shot-charts.pdf')
facet_GSW_shot_chart <- GSW_shot_chart + facet_wrap(name ~ ., ncol=3)
ggsave('../images/gsw-shot-charts.pdf', plot = facet_GSW_shot_chart, device = "pdf", width = 8, height = 7)
knitr::include_graphics('../images/gsw-shot-charts.pdf')
ggsave('../images/gsw-shot-charts.png', plot = facet_GSW_shot_chart, device = "png", width = 8, height = 7)
# shot chart with court background
klay_shot_chart <- ggplot(data = klay) +
annotation_custom(court_image, -250, 250, -50, 420) +
geom_point(aes(x = x, y = y, color = shot_made_flag)) +
ylim(-50, 420) +
ggtitle('Shot Chart: Klay Thompson (2016 season)') +
theme_minimal()
ggsave('../images/klay-thompson-shot-chart.pdf', plot = klay_shot_chart, device = "pdf", width = 6.5, height = 5)
../images/gsw-shot-charts.pdf
include_graphics('../images/gsw-shot-charts.pdf')
knitr::include_graphics('../images/gsw-shot-charts.pdf')
knitr::include_graphics('../images/gsw-shot-charts.png')
shots.data <-  read_csv('../data/shots.data')
shots.data <-  read_csv('../data/shots_data.csv')
shots.data <-  read_csv('../data/shots-data.csv')
shotsdata <-  read_csv('../data/shots-data.csv')
head(shotsdata)
?read_csv
library(readr)
shotsdata <-  read_csv('../data/shots-data.csv')
shotsdata <-  read.csv('../data/shots-data.csv')
shotsdata
shotsdata <-  read.csv('../data/shots-data.csv')[-1]
shotsdata
dim(shotsdata)
attributes(shots.data)
attributes(shotsdata)
groupdata <- group_by(shotsdata, name)
library(dplyr)
shotsdata <-  read.csv('../data/shots-data.csv')[-1]
groupdata <- group_by(shotsdata, name)
shotsummary <- summarise(groupdata,
count = n())
shotsummary
shotsummary <- summarise(groupdata,
total = n())
str(shotsdata)
shotsummary <- summarise(groupdata,
total = n(),
made = n(shot_made_flag == 'shot_yes'))
shot_made_flag == 'shot_yes'
shotsdata$shot_made_flag == 'shot_yes'
shotsummary <- summarise(groupdata,
total = n(),
made = sum(shot_made_flag == 'shot_yes'))
shotsummary <- mutate(shotsummary, perc_made = made/total)
shotsummary
shotsummary
shotsummary <- arrange(mutate(shotsummary, perc_made = made/total), desc(perc_made))
shotsummary
# 2 points
pts2summary <- summarise(groupdata,
total = sum(shot_type == 1),
made = sum(shot_made_flag == 'shot_yes' & shot_type == 1))
pts2summary <- arrange(mutate(shotsummary, perc_made = made/total), desc(perc_made))
pts2summary
pts2summary
# 2 points
pts2summary <- summarise(groupdata,
total = sum(shot_type == 1),
made = sum(shot_made_flag == 'shot_yes' & shot_type == 1))
pts2summary <- arrange(mutate(pts2summary, perc_made = made/total), desc(perc_made))
pts2summary
pts2summary
sum(shot_type == 1
)
# 2 points
pts2summary <- summarise(groupdata,
total = sum(shot_type == '1'),
made = sum(shot_made_flag == 'shot_yes' & shot_type == '1'))
pts2summary <- arrange(mutate(pts2summary, perc_made = made/total), desc(perc_made))
pts2summary
pts2summary
attributes(shotsdata)
str(shotsdata)
shotsdata <-  read.csv('../data/shots-data.csv', stringsAsFactors = FALSE)[-1]
groupdata <- group_by(shotsdata, name)
# 2 points
pts2summary <- summarise(groupdata,
total = sum(shot_type == '1'),
made = sum(shot_made_flag == 'shot_yes' & shot_type == '1'))
pts2summary <- arrange(mutate(pts2summary, perc_made = made/total), desc(perc_made))
pts2summary
pts2summary
#
shotsummary <- summarise(groupdata,
total = n(),
made = sum(shot_made_flag == 'shot_yes'))
shotsummary <- arrange(mutate(shotsummary, perc_made = made/total), desc(perc_made))
shotsummary
shotsdata$shot_type == '1'
shotsdata$shot_type
# 2 points
pts2summary <- summarise(groupdata,
total = sum(shot_type == "2PT Field Goal" ),
made = sum(shot_made_flag == 'shot_yes' & shot_type == "2PT Field Goal"))
pts2summary <- arrange(mutate(pts2summary, perc_made = made/total), desc(perc_made))
pts2summary
# 3 points
pts3summary <- summarise(groupdata,
total = sum(shot_type == "3PT Field Goal"),
made = sum(shot_made_flag == 'shot_yes' & shot_type == "3PT Field Goal"))
pts3summary <- arrange(mutate(pts3summary, perc_made = made/total), desc(perc_made))
pts3summary
a<-1:8
matrix(a,nrow = 4)
matrix(a,nrow = 4)
factor(a)
factor(c(1,2,4,'df'))
a<-factor(c(1,2,4,'df'))
a
mode(a)
mode(b)
typeof(a)
shotsdata
class(shotsdata)
shotsclass(name)
shotsdata[1,,drop=FALSE]
shotsdata[1,]
shotsdata[1,,drop=FALSE]
shotsdata[1,,drop=T]
shotsdata[,1,drop=T]
shotsdata[,1]
shotsdata[,1,drop=F]
?read.csv
help("readJPEG")
help(readJPEG)
andre
andre[ ]
andre[[]]
andre[[ ]]
andre[[1]]
3f<-d
